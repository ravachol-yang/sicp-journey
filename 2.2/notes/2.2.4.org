#+title: 2.2.4Example: A Picture Language
#+author: Ravachol <ravachol.yang@gmail.com>

* The picture language

the drawing of a painter called wave4 that is built up in two stages starting from wave: 

#+begin_src racket
(define wave2 (beside wave (flip-vert wave)))
(define wave4 (below wave2 wave2))
#+end_src

abstract the pattern

#+begin_src racket
(define (flipped-pairs painter)
  (let ((painter2 
         (beside painter 
                 (flip-vert painter))))
    (below painter2 painter2)))
#+end_src

recursive operations

#+begin_src racket
(define (right-split painter n)
  (if (= n 0)
      painter
      (let ((smaller (right-split painter 
                                  (- n 1))))
        (beside painter 
                (below smaller smaller)))))
#+end_src

We can produce balanced patterns by branching upwards as well as towards the right
(see Exercise 2.44, Figure 2.13 and Figure 2.14): 
#+begin_src racket
(define (corner-split painter n)
  (if (= n 0)
      painter
      (let ((up (up-split painter (- n 1)))
            (right (right-split painter 
                                (- n 1))))
        (let ((top-left (beside up up))
              (bottom-right (below right 
                                   right))
              (corner (corner-split painter 
                                    (- n 1))))
          (beside (below painter top-left)
                  (below bottom-right 
                         corner))))))
#+end_src

By placing four copies of a corner-split appropriately, we obtain a pattern called square-limit,
whose application to wave and rogers is shown in Figure 2.9:
#+begin_src racket
(define (square-limit painter n)
  (let ((quarter (corner-split painter n)))
    (let ((half (beside (flip-horiz quarter) 
                        quarter)))
      (below (flip-vert half) half))))
#+end_src
